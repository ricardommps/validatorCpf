{"ast":null,"code":"import axios from 'axios';\nimport { ToastManager } from './common/UI';\nimport { startRequest, stopRequest } from './redux/ui/actions';\nimport EnvConstant from './constants/env.constants';\nexport default (function (dispatch) {\n  axios.defaults.baseURL = EnvConstant.BASE_URL;\n  axios.defaults.headers.post['Content-Type'] = 'application/json';\n  axios.defaults.headers['Cache-control'] = 'no-cache';\n  axios.defaults.headers['Pragma'] = 'no-cache';\n  axios.defaults.headers['Expires'] = 0;\n  if (!dispatch) return;\n\n  var errorCallBack = function errorCallBack(error) {\n    console.log(\"INTERCEPTOR>>>\", error.response);\n    dispatch(stopRequest());\n    var message = 'Falha de conexão com servidor.';\n\n    if (error && error.response && error.response.data && error.response.data.error) {\n      message = error.response.data.error;\n    }\n\n    ToastManager.showErrorMessage(message);\n    return Promise.reject(error);\n  };\n\n  axios.interceptors.request.use(function (config) {\n    dispatch(startRequest());\n    return config;\n  }, errorCallBack);\n  axios.interceptors.response.use(function (response) {\n    dispatch(stopRequest());\n    return response;\n  }, errorCallBack);\n});","map":{"version":3,"sources":["/client/src/app/src/interceptErrors.js"],"names":["axios","ToastManager","startRequest","stopRequest","EnvConstant","dispatch","defaults","baseURL","BASE_URL","headers","post","errorCallBack","error","console","log","response","message","data","showErrorMessage","Promise","reject","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,oBAA1C;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AAEA,gBAAe,UAAAC,QAAQ,EAAI;AAC1BL,EAAAA,KAAK,CAACM,QAAN,CAAeC,OAAf,GAAyBH,WAAW,CAACI,QAArC;AACAR,EAAAA,KAAK,CAACM,QAAN,CAAeG,OAAf,CAAuBC,IAAvB,CAA4B,cAA5B,IAA8C,kBAA9C;AACAV,EAAAA,KAAK,CAACM,QAAN,CAAeG,OAAf,CAAuB,eAAvB,IAA0C,UAA1C;AACAT,EAAAA,KAAK,CAACM,QAAN,CAAeG,OAAf,CAAuB,QAAvB,IAAmC,UAAnC;AACAT,EAAAA,KAAK,CAACM,QAAN,CAAeG,OAAf,CAAuB,SAAvB,IAAoC,CAApC;AAEA,MAAI,CAACJ,QAAL,EAAe;;AAEf,MAAIM,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BF,KAAK,CAACG,QAAnC;AACAV,IAAAA,QAAQ,CAACF,WAAW,EAAZ,CAAR;AACA,QAAIa,OAAO,GAAG,gCAAd;;AAGA,QAAIJ,KAAK,IAAIA,KAAK,CAACG,QAAf,IAA2BH,KAAK,CAACG,QAAN,CAAeE,IAA1C,IAAkDL,KAAK,CAACG,QAAN,CAAeE,IAAf,CAAoBL,KAA1E,EAAiF;AAChFI,MAAAA,OAAO,GAAGJ,KAAK,CAACG,QAAN,CAAeE,IAAf,CAAoBL,KAA9B;AACA;;AACDX,IAAAA,YAAY,CAACiB,gBAAb,CAA8BF,OAA9B;AACA,WAAOG,OAAO,CAACC,MAAR,CAAeR,KAAf,CAAP;AACA,GAXD;;AAaAZ,EAAAA,KAAK,CAACqB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAAC,MAAM,EAAI;AACxCnB,IAAAA,QAAQ,CAACH,YAAY,EAAb,CAAR;AACA,WAAOsB,MAAP;AACA,GAHD,EAGGb,aAHH;AAKAX,EAAAA,KAAK,CAACqB,YAAN,CAAmBN,QAAnB,CAA4BQ,GAA5B,CAAgC,UAAAR,QAAQ,EAAI;AAC3CV,IAAAA,QAAQ,CAACF,WAAW,EAAZ,CAAR;AACA,WAAOY,QAAP;AACA,GAHD,EAGGJ,aAHH;AAIA,CA/BD","sourcesContent":["import axios from 'axios';\n\nimport { ToastManager } from './common/UI';\nimport { startRequest, stopRequest } from './redux/ui/actions';\nimport EnvConstant from './constants/env.constants';\n\nexport default dispatch => {\n\taxios.defaults.baseURL = EnvConstant.BASE_URL;\n\taxios.defaults.headers.post['Content-Type'] = 'application/json';\n\taxios.defaults.headers['Cache-control'] = 'no-cache';\n\taxios.defaults.headers['Pragma'] = 'no-cache';\n\taxios.defaults.headers['Expires'] = 0;\n\n\tif (!dispatch) return;\n\n\tlet errorCallBack = error => {\n\t\tconsole.log(\"INTERCEPTOR>>>\",error.response)\n\t\tdispatch(stopRequest());\n\t\tlet message = 'Falha de conexão com servidor.'\n\t\t\n\t\t\n\t\tif (error && error.response && error.response.data && error.response.data.error) {\n\t\t\tmessage = error.response.data.error\n\t\t}\n\t\tToastManager.showErrorMessage(message);\n\t\treturn Promise.reject(error);\n\t};\n\n\taxios.interceptors.request.use(config => {\n\t\tdispatch(startRequest());\n\t\treturn config;\n\t}, errorCallBack);\n\n\taxios.interceptors.response.use(response => {\n\t\tdispatch(stopRequest());\n\t\treturn response;\n\t}, errorCallBack);\n};\n\n"]},"metadata":{},"sourceType":"module"}